/**** BEGIN LICENSE BLOCK ****

BSD 3-Clause License

Copyright (c) 2021-2023, the wind.
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this
   list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.

3. Neither the name of the copyright holder nor the names of its
   contributors may be used to endorse or promote products derived from
   this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

**** END LICENCE BLOCK ****/

// Highlighter: C#

// Describe a map in a simple grammar. Way more readable this one.

// Machine types
type int -4
type short -2
type byte 1
type bool byte
type EDID int
type ArtId byte (Version == ROE)
type ArtId short (Version != ROE)
type PlayerColor byte // fast identify

// "struct" and or "enum" generators
list "ObjNames.txt"// Data_H3bitmap_lod/ObjNames.txt overrides
                   // Data_H3bitmap_lod/ObjNames.txt; that's probably because of
                   // SoD being installed. TODO verify with AB-only install -
                   // that shall define the override policy; TODO official mod
                   // detection

// This defines the MapObj fields.
// Is the map using it?
[TextTable(eol: "\r\n", fs: " ")]
table "Objects.txt"
    Text SpriteName
    BinaryNumber[48] PassMask // Inverted along Y byte0 is byte5
    BinaryNumber[48] TrigMask
    BinaryNumber[9] Unk1
    BinaryNumber[9] Unk2
    Integer EdId
    Integer Unk3
    Integer Unk4
    Integer Unk5

??? EDID 135 "Oak Trees" // 0-based: "ObjNames.txt":135 & "ObjNames.txt":186

struct MapString
    byte Chars[int] // implicit "int Length" accessible via Chars.Length

// The distinct objects used by a map.
struct MapObj
    MapString SpriteName /* Maps to "Objects.txt".SpriteName
       w,h = (${sprite_name/.def/.msk}.bytes)0,1
       0 means impassable; also it is inverted alongside X:
       FF FF FF FF FF 7F:
       11111111
       11111111
       11111111 => w,h=2,2 =>    xinvert =>    only the 0 is impassable
       11111111                                (visible at the map editor)
       11111111               11            11
       01111111               01            10
       the mask max is 6x8 perhaps (at the editor there is a lake 3x7)
       A "Mine" (2x3) has PMask FF FF FF FF FF 1F and TMask 00 00 00 00 00 40:
       111 | 000
       000 | 010
       A "Swan Pond" (1x3) has P:...3F, T:...40:
       001 | 010 -> 100 | 010
       A "Hill Fort" (3x3) has P:...3F, T:...80:
       111 | 000    111 | 000
       111 | 000 -> 111 | 000
       001 | 100    100 | 001
       These masks do match the ones at "Objects.txt" so why are they duplicated
       at each map is beyond me. */
    byte PassMask[6] // big-endian ; 1 - passable
    byte TrigMask[6] // big-endian ; 1 - visit-able (trigger)
    byte Unk1[2] // Maps to "Objects.txt".Unk1
    short TerrainMask // Maps to "Objects.txt".Unk2
    int EdId // Editor Id; line number (0-based) at "ObjNames.txt"
    int SubId // Maps to "Objects.txt".Unk3
    byte Type // Maps to "Objects.txt".Unk4
    byte RenderOrder // Maps to "Objects.txt".Unk5 ; 0 - 1st; n - last
    byte Unk2[16] // Reserved?

struct Location
    byte X
    byte Y
    byte Z

// They're on the map, in the order you put them on it, at the editor.
struct ObjRef
    Location Pos // it refers the lower right corner of the x-inverted masks
    int<>MapObj[] Obj /* implicit "int id": MapObj & Obj = MapObj[id] -
                         look for array of MapObj at the global space; Map.Obj
                         for example */
    byte Unk1[5]
    ... Obj.EdId // the next field(s) depend on Obj.EdId

struct MapCreatures
    byte  Id (Version == ROE)
    short Id (Version != ROE)
    short Num

struct HasMessageAndGuards
    MapString    Message
    MapCreatures Creatures[7] (bool)
    byte         Unk1[4]

struct MessageAndGuards
    bool HasMessage
    HasMessageAndGuards (HasMessage)

struct GuardedReward
    MessageAndGuards MsgAndGuards
    int   Exp
    int   Mana
    byte  Morale
    byte  Luck
    int   Resources[MAP_RESOURCES]
    byte  PSkills[MAP_PRIMARY_SKILLS]
    short Abilities[byte] // 8:id, 8:level
    ArtId Artifacts[byte]
    byte  SpellId[byte]
    MapCreatures Creatures[byte]
    byte  Unk1[8]

struct Obj.EdId:26 // "Event" <=> grep -n ^ ObjNames.txt | grep ^$((n+1))
    GuardedReward
    byte  AvailableFor
    bool  ComputerActivate
    bool  Repeat
    byte  Unk2[4]

struct MapHero
    int          Id (Version > ROE)
    PlayerColor  Color
    byte         SubId
    MapString    Name (bool)
    bool         HasExp (Version > AB)
    int          Exp (HasExp || Version <= AB)
    byte         PortraitId (bool)
    short        SecondarySkills[int] (bool) // 8:first, 8:second
    MapCreatures Creatures[7] (bool)
    byte         Formation
    HeroArts     Artifacts
    byte         PatrolRadius
    bool         HasBio (Version > ROE)
    MapString    Bio (HasBio)
    byte         Sex (Version > ROE)
    bool         HasSpells (Version > AB)
    byte         Spells[9] (HasSpells)
    byte         SpellId (Version == AB)
    bool         HasPSkills (Version > AB)
    byte         PSkills[MAP_PRIMARY_SKILLS] (HasPSkills)
    byte         Unk1[16]

struct Obj.EdId:34,70,62 // "Hero", "Random Hero", "Prison"
    MapHero

struct MonMsg
    MapString Message
    int       Resources[MAP_RESOURCES]
    ArtId     ArtifactId

struct Obj.EdId:54,71-75,162-164 // "Monster", "Random Monster "1-7
    int    Id (Version > ROE)
    short  Quantity
    byte   Disposition
    MonMsg Message (bool)
    bool   NeverFlees
    bool   NotGrowing
    byte   Unk1[2]

struct Obj.EdId:59,91 // "Ocean Bottle", "Sign"
    MapString Text
    byte Unk1[4]

struct MapQuest
    byte      T // Mission Type
    byte      m2stats[4]      (T == 2) // ?
    int       Todo            (T == 1 || T == 3 || T == 4) // ?
    short     Artifacts[byte] (T == 5)
    int       Creatures[byte] (T == 6) // 16:type, 16:quantity
    int       Resources[7]    (T == 7)
    byte      Todo2           (T == 8 || T == 9)
    int       Limit           (T != 0)
    MapString Intro           (T != 0)
    MapString Meanwhile       (T != 0)
    MapString Completed       (T != 0)

enum MapSeerRewardType byte
    NOTHING          0
    EXPERIENCE       1
    MANA_POINTS      2
    MORALE_BONUS     3
    LUCK_BONUS       4
    RESOURCES        5
    PRIMARY_SKILL    6
    SECONDARY_SKILL  7
    ARTIFACT         8
    SPELL            9
    CREATURE        10

struct Obj.EdId:83 // "Seer's Hut"
    byte              ArtifactId (Version == ROE)
    MapQuest          Quest (Version != ROE)
    MapSeerRewardType R (Quest.T > 0)
    int   Count      (R == EXPERIENCE || R == MANA_POINTS)
    byte  Count      (R == MORALE_BONUS || R == LUCK_BONUS)
    byte  ResId      (R == RESOURCES)
    int   ResCnt     (R == RESOURCES)
    byte  SkillId    (R == PRIMARY_SKILL || R == SECONDARY_SKILL)
    byte  SkillCnt   (R == PRIMARY_SKILL || R == SECONDARY_SKILL)
    short ArtifactId (R == ARTIFACT)
    byte  SpellId    (R == SPELL)
    short MonId      (R == CREATURE)
    short MonCnt     (R == CREATURE)
    byte  Unk1[2]    (R != NOTHING)
    byte  Unk1[3]    (R == NOTHING)

struct Obj.EdId:113 // "Witch Hut"
    byte PotentialSKillsMask[4] (Version > ROE)

struct Obj.EdId:81 // "Scholar"
    byte BonusType
    byte BonusId
    byte Unk1[6]

struct Obj.EdId:33,219 // "Garrison", "Garrison"
    PlayerColor  Color
    MapCreatures Creatures[7]
    bool         Removable (Version > ROE)
    byte         Unk1[8]

struct Obj.EdId:5,65-69 /* "Artifact", "Random Artifact",
                           "Random Treasure Artifact",
                           "Random Minor Artifact", "Random Major Artifact",
                           "Random Relic" */
    MessageAndGuards MsgAndGuards

struct Obj.EdId:93
    MessageAndGuards MsgAndGuards // "Spell Scroll"
    int              ScrollId

struct Obj.EdId:76,79 // "Random Resource", "Resource"
    MessageAndGuards MsgAndGuards
    int              Amount // the type seems to be coming from SubId?
    byte             Unk1[4]

struct TownEvent
    MapEvent
    byte     NewBuildingsMask[6]
    short    EeventCre[7]
    byte     Unk2[4]

struct Obj.EdId:77,98 // "Random Town", "Town"
    int          Id                  (Version > ROE)
    PlayerColor  Color
    MapString    Name                (bool)
    MapCreatures Garrison[7]         (bool)
    byte         Formation
    bool         CustomizedBuildings
    byte         BuildMask[6]        (CustomizedBuildings)
    byte         CantBuildMask[6]    (CustomizedBuildings)
    bool         HasFort             (!CustomizedBuildings)
    byte         SpellMaskMust[9]    (Version > ROE)
    byte         SpellMaskPerhaps[9]
    TownEvent    Events[int]
    byte         Alignment           (Version > AB)
    byte         Unk1[3]

struct Obj.EdId:53,220,17-20 // "Mine", "Mine", "Creature Generator "1-4
    PlayerColor Color
    byte        Unk1[3]

struct Obj.EdId:88-90 /* "Shrine of Magic Incantation",
                         "Shrine of Magic Gesture", "Shrine of Magic Thought" */
    byte SpellId
    byte Unk1[3]

struct Obj.EdId:6 // "Pandora's Box"
    GuardedReward

struct Obj.EdId:36 // "Grail"
    int Radius

struct Obj.EdId:216 // "Random Dwelling"
    int   Kingdom // Player color
    int   DweId
    short NoIdea (DweId == 0)
    byte  MinLevel
    byte  MaxLevel

struct Obj.EdId:217 // "" ??
    int   Kingdom // Player color
    int   DweId
    short NoIdea (DweId == 0)

struct Obj.EdId:218 // "" ??
    int  Kingdom // Player color
    byte MinLevel
    byte MaxLevel

struct Obj.EdId:215 // "Quest Guard"
    MapQuest

struct Obj.EdId:87,42 // "Shipyard", "Lighthouse"
    int Kingdom // Player color

struct Obj.EdId:214 // "Hero Placeholder"
    PlayerColor Color
    byte        TypeId
    byte        HeroPower (255 == TypeId) // ?

enum MapVersion int
    ROE 0x0e
    AB  0x15
    SOD 0x1c
    WOG 0x33

enum Behavior byte
    RANDOM   0
    WARRIOR  1
    BUILDER  2
    EXPLORER 3

const MAP_PLAYERS          8
const MAP_HEROES         156
const MAP_PRIMARY_SKILLS   4
const MAP_RESOURCES        8

const MAP_FACTIONS  9 (Version > ROE)
const MAP_FACTIONS  8 (Version == ROE)

const MAP_DEFAULT_HERO_ID 0xff

struct AllowedHero
    byte Id
    MapString Name

struct PlayerCantPlay
    byte Unk1[13] (Version >= SOD)
    byte Unk1[12] (Version == AB)
    byte Unk1[ 6] (Version == ROE)

struct PlayerCanPlay
    Behavior AITactics
    byte Unk2 (Version >= SOD) // 16-bit ?
    byte Unk3 (Version != ROE) // 16-bit ? AllowedFactions
    byte AllowedFactions
    bool RandomFaction
    bool HasMainTown
    bool GenAtMT (HasMainTown && Version != ROE)
    bool Gen2 (HasMainTown && Version != ROE) // No idea whats this
    Location MainTown (HasMainTown)
    bool RandomHero
    byte CutomHeroId
    byte CutomHeroPortrait (CutomHeroId != MAP_DEFAULT_HERO_ID)
    byte CutomHeroName (CutomHeroId != MAP_DEFAULT_HERO_ID)
    byte NoIdea (Version != ROE)
    AllowedHero AllowedHeroes[int] (Version != ROE)

struct Player
    bool Human
    bool Computer
    PlayerCantPlay (!Human && !Computer) // implicit name - merge
    PlayerCanPlay (Human || Computer)    // implicit name - merge

enum MapVCon byte
    ACQUIRE_ARTIFACT     0
    CREATURES            1
    RESOURCES            2
    UPGRADE_TOWN         3
    GRAIL                4
    DEFEAT_HERO          5
    CAPTURE_TOWN         6
    DEFEAT_MONSTER       7
    FLAG_DWELLINGS       8
    FLAG_MINES           9
    TRANSPORT_ARTIFACT  10
    NONE               255

enum MapLCon
    TOWN   0
    HERO   1
    TIME   2
    NONE 255

struct VConditionArt
    byte Type
    byte Unk1 (Version != ROE) // 16-bit?

struct VConditionQObj
    byte Type
    byte Unk1 (Version != ROE) // 16-bit?
    int Quantity

struct VConditionUpgTown
    Location Pos
    byte HallLevel
    byte CastleLevel

struct VLConditionAtPos
    Location Pos

struct VConditionObjAtPos
    byte Type
    Location Pos

struct VCondition
    bool AllowNoneAsWell
    bool AppliesToAI
    // no AllowNoneAsWell []
    VConditionArt (VCon == ACQUIRE_ARTIFACT)
    VConditionQObj (VCon == CREATURES || VCon == RESOURCES)
    // no AppliesToAI []
    VConditionUpgTown (VCon == UPGRADE_TOWN)
    // No AppliesToAI checkbox for DEFEAT_MONSTER
    // No check-boxes at all for DEFEAT_HERO and GRAIL
    VLConditionAtPos (VCon >= GRAIL && VCon <= DEFEAT_MONSTER)
    //TODO There is no AllowNoneAsWell check-box at the editor
    VConditionObjAtPos (VCon == TRANSPORT_ARTIFACT)

struct WinCondition
    MapVCon VCon
    VCondition (VCon != NONE)

struct LCondition
    VLConditionAtPos (LCon == TOWN || LCon == HERO)
    int Quantity (LCon == TIME)

struct LooseCondition
    MapLCon LCon
    LCondition (LCon != NONE)

struct NoIdeaHero
    byte      Id
    byte      PortraitId
    MapString Name
    byte      Players // ?

struct Rumor
    MapString Name
    MapString Text

struct HeroArts
    ArtId Arts[16]
    // ArtId Mach4
    ArtId SpellB
    ArtId Misc5 (Version > ROE)
    byte  Unk1 (Version == ROE)
    ArtId Backpack[short]

struct CustomizedHero
    int       Exp  (bool) // implicit condition read a bool and evaluate it
    short     SecondarySkills[int] (bool)
    HeroArts  Arts (bool)
    MapString Bio  (bool)
    byte      Sex
    byte      Spells[9] (bool)
    byte      PSkills[MAP_PRIMARY_SKILLS] (bool)

struct CHero
    bool Is // Whats the point of it?
    CustomizedHero (Is)

struct TTile
    byte Type
    byte SFrame
    byte RiverType
    byte RiverDir
    byte RoadType
    byte RoadDir
    byte Flags

struct MapEvent
    MapString Name
    MapString Message
    int Resources[MAP_RESOURCES]
    byte Players // Mask ?
    byte HumanPlayers (Version > AB)
    byte ComputerPlayers
    short FirstDay
    byte Repeats // Every n days
    byte Unk1[17]

[Stream(type: zlibMapStream)] // specify that it requires a specific stream
format h3m
    MapVersion     Version
    bool           HasPlayers // What do if not?
    int            Size       // 36, 72, 108, 144
    byte           Levels     // 1 or 2
    MapString      Name
    MapString      Description
    byte           Difficulty
    byte           LevelLimit (Version != ROE)
    //
    Player         Players[MAP_PLAYERS]
    //
    WinCondition   SpecialWCon
    LooseCondition SpecialLCon
    //
    byte           Teams
    byte           Team[MAP_PLAYERS]
    //
    byte           AllowedHeroes[16] (Version == ROE)
    byte           AllowedHeroes[20] (Version != ROE)
    byte           AllowedHeroesNoIdea[int] (Version > ROE)
    //
    NoIdeaHero     MysteriousHeroes[byte]
    byte           Unk1[31]
    //
    byte           AllowedArtifacts[17] (Version == AB)
    byte           AllowedArtifacts[18] (Version > AB)
    //
    byte           AllowedSpells[9]
    byte           AllowedAbilities[4]
    //
    Rumor          Rumors[int]
    //
    CHero          CustomizedHeroes[MAP_HEROES] (Version >= SOD)
    //
    TTile          Terrain[Levels][Size][Size]
    //
    MapObj         Obj[int]
    ObjRef         Ref[int]
    MapEvent       TimedEvents[int]
